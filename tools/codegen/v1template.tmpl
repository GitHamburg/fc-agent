//nolint:golint
package v1


// Generated by tool/codegen to add a new integration add to tools/codegen/registry, then run make generate


import (
    "github.com/grafana/agent/pkg/integrations/shared"
    "gopkg.in/yaml.v2"
    "fmt"

{{ range $element := . -}}
    "{{ $element.PackagePath}}"
{{ end -}}
)



type Integrations struct {
{{ range $index, $element := . -}}
    {{ $element.Name }} *{{$element.Name}} `yaml:"{{ $element.PackageName }},omitempty"`
{{ end -}}
    TestConfigs []shared.V1IntegrationConfig `yaml:"-,omitempty"`
}

func (v *Integrations) ActiveConfigs() []shared.V1IntegrationConfig {
    activeConfigs := make([]shared.V1IntegrationConfig,0)
{{ range $index, $element := . -}}
    if v.{{ $element.Name }} != nil {
        activeConfigs = append(activeConfigs, newConfigWrapper(&v.{{ $element.Name}}.Config, v.{{ $element.Name}}.Common))
    }
{{ end -}}
    activeConfigs = append(activeConfigs, v.TestConfigs...)
    return activeConfigs
}


type ConfigWrapper struct {
    cfg shared.Config
    cmn shared.Common
}

func (c *ConfigWrapper) Common() shared.Common {
    return c.cmn
}

func (c *ConfigWrapper) Config() shared.Config {
    return c.cfg
}

func newConfigWrapper(cfg shared.Config, cmn shared.Common) *ConfigWrapper {
    return &ConfigWrapper{
        cfg: cfg,
        cmn: cmn,
    }
}

{{ range $element := . -}}

type {{$element.Name}} struct {
    {{$element.ConfigStruct}} `yaml:",omitempty,inline"`
    shared.Common `yaml:",omitempty,inline"`
}


func (c *{{ .Name }}) UnmarshalYAML(unmarshal func(interface{}) error) error {
    {{ if .DefaultConfig -}}
    c.Config = {{ .PackageName }}.DefaultConfig
    {{ end -}}
    err := implementsMarshaller(c.Config)
    if err != nil {
        return err
    }
    type plain {{ .Name }}
    return unmarshal((*plain)(c))
}
{{ end -}}


func implementsMarshaller(i interface{}) error {
    _, ok := i.(yaml.Unmarshaler)
    if ok {
        return fmt.Errorf("%T cannot implement custom unmarshaler", i)
    }
    return nil
}